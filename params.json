{"name":"dispatch","tagline":"PHP 5.3+ Utility Library","body":"## Dispatch PHP 5.3 Utility Library\r\nAt the very least, `dispatch()` is a front controller for your web app. It doesn't give you the full MVC setup, but it lets you define url routes and segregate your app logic from your views.\r\n\r\n### Requirements\r\n* PHP 5.3\r\n* `mcrypt` extension if you want to use encrypted cookies and wish to use `encrypt()` and `decrypt()` functions\r\n* `apc` extension if you want to use `cache()` and `cache_invalidate()`\r\n\r\n### Contributors\r\nThanks to the following contributors for helping improve this tool :)\r\n\r\n* Kafene [kafene](https://github.com/kafene)\r\n* Martin Angelov [martingalv](https://github.com/martinaglv)\r\n* Lars [larsbo](https://github.com/larsbo)\r\n\r\n### Related Libraries\r\n* [disptach-mongo](http://github.com/noodlehaus/dispatch-mongo) - wrapper for commonly used mongodb functions for dispatch\r\n* [disptach-elastic](http://github.com/noodlehaus/dispatch-elastic) - wrapper for commonly used elasticsearch operations for dispatch\r\n\r\n### Configuration Variables\r\nThe following functions rely on variables set via `config()`:\r\n* `config('debug.log')` is used by `_log()` as the destination log file\r\n* `config('debug.enable')` dictates if `_log()` does something or not\r\n* `config('views.root')` is used by `render()` and `partial()`, defaults to `./views`\r\n* `config('views.layout')` is used by `render()`, defaults to `layout`\r\n* `config('cookies.secret')` is used by `encrypt()`, `decrypt()`, `set_cookie()` and `get_cookie()`, defaults to an empty string\r\n* `config('cookies.flash')` is used by `flash()` for setting messages\r\n* `config('site.url')` is used by `site_url()` and `site_path()`\r\n* `config('source', 'inifile.ini')` makes the contents of `inifile.ini` accessible via `config()` calls\r\n\r\n### Quick and Basic\r\nA typical PHP app using dispatch() will look like this.\r\n\r\n```php\r\n<?php\r\n// include the library\r\ninclude 'dispatch.php';\r\n\r\n// define your routes\r\nget('/greet', function () {\r\n\t// render a view\r\n\trender('greet-form');\r\n});\r\n\r\n// post handler\r\npost('/greet', function () {\r\n\t$name = from($_POST, 'name');\r\n\t// render a view while passing some locals\r\n\trender('greet-show', array('name' => $name));\r\n});\r\n\r\n// serve your site\r\ndispatch();\r\n?>\r\n```\r\n\r\n### Route Symbol Filters\r\nThis is taken from ExpressJS. Route filters let you map functions against symbols in your routes. These functions then get executed when those symbols are matched.\r\n\r\n```php\r\n<?php\r\n// preload blog entry whenever a matching route has :blog_id in it\r\nfilter('blog_id', function ($blog_id) {\r\n\t$blog = Blog::findOne($blog_id);\r\n\t// stash() lets you store stuff for later use (NOT a cache)\r\n\tstash('blog', $blog);\r\n});\r\n\r\n// here, we have :blog_id in the route, so our preloader gets run\r\nget('/blogs/:blog_id', function ($blog_id) {\r\n\t// pick up what we got from the stash\r\n\t$blog = stash('blog');\r\n\trender('blogs/show', array('blog' => $blog);\r\n});\r\n?>\r\n```\r\n\r\n### Conditions\r\nConditions are basically helper functions. I adopted the name 'conditions' so as to encourage you to use it at the start of your handlers.\r\n\r\n```php\r\n<?php\r\n// require that users are signed in\r\ncondition('signed_in', function () {\r\n  redirect(403, '/403-forbidden', !stash('user'));\r\n});\r\n\r\n// require a valid token when accessing a page\r\nget('/admin', function () {\r\n  condition('signed_in');\r\n  render('admin');\r\n});\r\n?>\r\n```\r\n*NOTE:* Because of the way conditions are defined, conditions can't have anonymous functions as their first parameter.\r\n\r\n### Middleware\r\nIf you have wind up routines that need to be done before handling the request, you can queue them up using the `middleware()` function.\r\n\r\n```php\r\n<?php\r\n// create a db connection and stash it\r\nmiddleware(function () {\r\n\t$db = create_connection();\r\n\tstash('db', $db);\r\n});\r\n\r\n// assume that the db connection was stash()ed\r\nget('/list', function () {\r\n\t$db = stash('db');\r\n\t// do stuff with the DB\r\n});\r\n?>\r\n```\r\n\r\n### Caching via APC\r\nIf you have `apc.so` enabled, you can make use of dispatch's simple caching functions.\r\n\r\n```php\r\n<?php\r\n// fetch something from the cache (ttl for the cache is 60, based on last parameter)\r\n$data = cache('users', function () {\r\n  // this function is called as a loader if apc doesn't have 'users' in the cache,\r\n  // whatever it returns gets stored into apc and mapped to the 'users' key\r\n  return array('sheryl', 'addie', 'jaydee');\r\n}, 60);\r\n\r\n// invalidate our cached keys (users, products, news)\r\ncache_invalidate('users', 'products', 'news');\r\n```\r\n\r\n### Configurations\r\nYou can make use of ini files for configuration by doing something like `config('source', 'myconfig.ini')`.\r\nThis lets you put configuration settings in ini files instead of making `config()` calls in your code.\r\n\r\n```php\r\n<?php\r\n// load the contents of my-settings.ini into config()\r\nconfig('source', 'my-settings.ini');\r\n\r\n// set a different folder for the views\r\nconfig('views.root', __DIR__.'/myviews');\r\n\r\n// get the encryption secret\r\n$secret = config('cookies.secret');\r\n?>\r\n```\r\n\r\n### Utility Functions\r\nThere are a lot of other useful routines in the library. Documentation is still lacking but they're very small and easy to figure out. Read the source for now.\r\n\r\n```php\r\n<?php\r\n// store a config and get it\r\nconfig('views.root', './views');\r\nconfig('views.root'); // returns './views'\r\n\r\n// stash a var and get it (useful for moving stuff between scopes)\r\nstash('user', $user);\r\nstash('user'); // returns stored $user var\r\n\r\n// redirect with a status code\r\nredirect(302, '/index');\r\n\r\n// redirect if a condition is met\r\nredirect(403, '/users', !$authenticated);\r\n\r\n// redirect only if func is satisfied\r\nredirect('/admin', function () use ($auth) { return !!$auth; });\r\n\r\n// redirect only if func is satisfied, and with a diff code\r\nredirect(301, '/admin', function () use ($auth) { return !!$auth; });\r\n\r\n// send a http error code and print out a message\r\nerror(403, 'Forbidden');\r\n\r\n// get the current HTTP method or check the current method\r\nmethod(); // GET, POST, PUT, DELETE\r\nmethod('POST'); // true if POST request, false otherwise\r\n\r\n// client's IP\r\nclient_ip();\r\n\r\n// get something or a hash from a hash\r\n$name = from($_POST, 'name');\r\n$user = from($_POST, array('username', 'email', 'password'));\r\n\r\n// escape a string\r\n_h('Marley & Me');\r\n\r\n// url encode\r\n_u('http://noodlehaus.github.com/dispatch');\r\n\r\n// load a partial using some file and locals\r\n$html = partial('users/profile', array('user' => $user));\r\n?>\r\n```\r\n\r\n## LICENSE\r\nMIT\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}